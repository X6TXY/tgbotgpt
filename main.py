from library import *
load_dotenv()

PICK_STATES = {}
CHECK_STATES = {}

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")
MONGO_DB = os.getenv("MONGO_DB")

client = AsyncIOMotorClient(MONGO_URI)
db = client[MONGO_DB]

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

user_manager = user.UserInteractionHandler(
db.users_collection, bot
)

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–õ—É—á—à–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! üåê"),
            
        ],[KeyboardButton(text="–õ—É—á—à–∏–µ —Å—Ñ–µ—Ä—ã –¥–ª—è –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 2024 –≥–æ–¥—É! üöÄ"),],
        [KeyboardButton(text="–§—É–Ω–∫—Ü–∏–∏"),KeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–∏"),]
    ],
    resize_keyboard=True,
)

keyboard_functions = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"),
            KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"),
        ],
        [
            KeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"),
            KeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏ Yahoo Finance"),
        ],
        [
            
            KeyboardButton(text="–ù–∞–∑–∞–¥"),
        ],
    ],
    resize_keyboard=True,
)


@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    
    PICK_STATES[message.from_user.id] = 0
    CHECK_STATES[message.from_user.id] = 0
    user_id = message.from_user.id
    user_paid = False
    user_data = {
        "_id": user_id,
        "user_paid": user_paid,
        "_name": message.from_user.first_name,
        "_news": True,
        "_points": PICK_STATES[message.from_user.id],
    }

    # db.users.update_one({"_id": user_id}, {"$set": user_data}, upsert=True)

    await message.reply(
        """üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å Narasense AI! üìà

–¢—ã —Ö–æ—á–µ—à—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Å—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º? –ù–µ –∑–Ω–∞–µ—à—å, —Å –∫–∞–∫–æ–π –∞–∫—Ü–∏–∏ –Ω–∞—á–∞—Ç—å? –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —ç—Ç–æ–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏!

‚ú® –ß—Ç–æ –¥–µ–ª–∞–µ—Ç Narasense AI –¥–ª—è —Ç–µ–±—è:

üìä –ê–Ω–∞–ª–∏–∑ –†—ã–Ω–∫–∞: –ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫, –≤—ã—è–≤–ª—è—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

üîç –¢–æ—á–Ω—ã–µ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ü–æ–ª—É—á–∞–π —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª—É–±–æ–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—Ä–µ–Ω–¥–æ–≤.

üí° –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –°–æ–≤–µ—Ç—ã: –£–∑–Ω–∞–≤–∞–π –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø–æ–ª—É—á–∞–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ–≤–µ—Ç—ã –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.

üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö.

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∞ –Ω–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã.

üöÄ –°—Ç–∞–Ω—å —É—Å–ø–µ—à–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º —Å Narasense AI –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ –¥–∞–≤–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ! üí∞

üìà –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—Å–ø–µ—Ö —Å Narasense AI! üöÄ"""
    )
    if bool(user_manager.find_user(user_data)) == False:
        welcome_msg = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Å–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å."
        question_msg = "1. Investment Goals:"
        await bot.send_message(
            message.from_user.id, welcome_msg
        )
        await bot.send_message(
            message.from_user.id, question_msg, reply_markup=qs.first_keyboard
        )
    else:
        bot(chat_id=message.from_user.id, text="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=keyboard)
        

@dp.callback_query_handler(lambda c: c.data.startswith('answer_'))
async def process_answer(callback_query: CallbackQuery):
    answer = callback_query.data.replace('answer_', '')
    PICK_STATES[callback_query.from_user.id] += int (answer)
    CHECK_STATES[callback_query.from_user.id] += int (1)
    print(PICK_STATES[callback_query.from_user.id])
    skip_count = CHECK_STATES[callback_query.from_user.id]
    keyboard1 = InlineKeyboardMarkup()
    key1 = ''
    if CHECK_STATES[callback_query.from_user.id] != 8:
        for key, value in qs.questions.items():
            if skip_count > 1: 
                skip_count -= 1
                continue
            key1 = key
            for answer in value:
                item_after_count = answer.split()
                final = ""
                for item in item_after_count:
                    if 'answer_' in item:
                        continue
                    final += f'{item} '
                keyboard1.add(InlineKeyboardButton(final, callback_data=item_after_count[0]))
            break
        await bot.edit_message_text(key1, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=keyboard1)
    else:
        await bot.edit_message_text(f"–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–µ—Å—Ç. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {PICK_STATES[callback_query.from_user.id]}", chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
        congr = "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"
        await bot.send_message(callback_query.from_user.id,congr,reply_markup=keyboard)
        user1 = {
            "_id": callback_query.from_user.user_id,
            "user_paid": False,
            "_name": callback_query.from_user.first_name,
            "_news": True,
            "_points": PICK_STATES[callback_query.from_user.id],
        }
        
        user_manager.add_user(user1)

@dp.message_handler(lambda message: message.text == "–§—É–Ω–∫—Ü–∏–∏")
async def handle_functions(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=keyboard_functions)


@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def handle_functions(message: types.Message):
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞")
async def handle_market_news(message: types.Message):
    response = get_market_news()
    await message.reply(response, parse_mode=types.ParseMode.MARKDOWN,reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏")
async def handler_company_news(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")

    @dp.message_handler(content_types=types.ContentTypes.TEXT)
    async def process_ticker_input(message: types.Message):
        ticker = message.text.upper() 
        response = get_news(ticker)

        await message.answer(response, parse_mode=ParseMode.MARKDOWN,reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def handle_recommendations(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")
    @dp.message_handler(content_types=types.ContentTypes.TEXT)
    async def process_ticker(message: types.Message):
        ticker = message.text.upper()
        response = get_recommendations_summary(ticker)
        await message.answer(response,parse_mode=types.ParseMode.MARKDOWN,reply_markup=keyboard)
        

@dp.message_handler(lambda message: message.text == "–ù–æ–≤–æ—Å—Ç–∏ Yahoo Finance")
async def handler_company_news(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")
    @dp.message_handler(content_types=types.ContentTypes.TEXT)
    async def process_ticker(message: types.Message):
        ticker = message.text.upper()
        response = yf_news(ticker)
        await message.answer(response,parse_mode=types.ParseMode.MARKDOWN,reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–∏")
async def handler_graph(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")
    @dp.message_handler(content_types=types.ContentTypes.TEXT)
    async def process_ticker(message: types.Message):
        ticker = message.text.upper()
        image_path = graph(ticker)
        with open(image_path, 'rb') as photo:
            await message.reply_photo(photo, caption=f'{ticker} Stock Price Over Time')

        os.remove(image_path)


@dp.message_handler(commands=["graph"])
async def handler_company_graph(message: types.Message):
    try:
        ticker = message.text.split(" ", 1)[1].strip()


        image_path = graph(ticker)


        with open(image_path, 'rb') as photo:
            await message.reply_photo(photo, caption=f'{ticker} Stock Price Over Time')

        os.remove(image_path)

    except IndexError:
        await message.reply("Please provide a company ticker. For example: /graph AAPL")

@dp.message_handler(lambda message: message.text == "–õ—É—á—à–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! üåê")
async def handle_test_gpt(message: types.Message):
    image_path = "generated_image.png"
    with open(image_path, "rb") as image_file:
        await bot.send_photo(message.chat.id, photo=image_file)
    loading_message = await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞...")
    response = testgpt_main()
    await asyncio.sleep(2)

    await bot.edit_message_text(
        response, chat_id=loading_message.chat.id, message_id=loading_message.message_id
    )

@dp.message_handler(lambda message: message.text == "–õ—É—á—à–∏–µ —Å—Ñ–µ—Ä—ã –¥–ª—è –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 2024 –≥–æ–¥—É! üöÄ")
async def handle_test_gpt(message: types.Message):
    loading_message = await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞...")
    response = spheregpt_main()
    await asyncio.sleep(2)

    await bot.edit_message_text(
        response, chat_id=loading_message.chat.id, message_id=loading_message.message_id
    )


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
